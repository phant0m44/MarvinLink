#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <BH1750.h>
#include <DHT.h>
#include <ArduinoJson.h>

// ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø WiFi ==========
// –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—ñ –¥–∞–Ω—ñ
const char* WIFI_SSID = "YOUR_WIFI_SSID";
const char* WIFI_PASSWORD = "YOUR_WIFI_PASSWORD";

// ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ï–†–í–ï–†–ê ==========
// IP –∞–¥—Ä–µ—Å–∞ –≤–∞—à–æ–≥–æ Orange Pi
const char* SERVER_IP = "marvinlink.local";  // –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—É IP –∞–¥—Ä–µ—Å—É
const int SERVER_PORT = 80;

// ========== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –î–ê–¢–ß–ò–ö–Ü–í ==========
// –ü—ñ–Ω–∏ –¥–ª—è DHT22 (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
#define DHT_PIN 4
#define DHT_TYPE DHT22

// I2C –ø—ñ–Ω–∏ (–¥–ª—è BME280 —Ç–∞ BH1750)
#define I2C_SDA 21
#define I2C_SCL 22

// ========== –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ==========
Adafruit_BME280 bme;
BH1750 lightMeter;
DHT dht(DHT_PIN, DHT_TYPE);

bool bme280_available = false;
bool bh1750_available = false;
bool dht22_available = false;

unsigned long lastSendTime = 0;
const unsigned long SEND_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥

// ========== –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ò–• ==========
struct SensorInfo {
    String name;
    String type;
    String unit;
    String icon;
};

void setup() {
    Serial.begin(115200);
    delay(1000);
    
    Serial.println("\n\n========================================");
    Serial.println("MarvinLink ESP32 Sensor Module");
    Serial.println("========================================\n");
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è I2C
    Wire.begin(I2C_SDA, I2C_SCL);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è –¥–∞—Ç—á–∏–∫—ñ–≤
    detectSensors();
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WiFi
    connectWiFi();
    
    Serial.println("\n========================================");
    Serial.println("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!");
    Serial.println("========================================\n");
}

void loop() {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ WiFi –∑'—î–¥–Ω–∞–Ω–Ω—è
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi –≤—Ç—Ä–∞—á–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...");
        connectWiFi();
    }
    
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –∫–æ–∂–Ω—ñ SEND_INTERVAL –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
    if (millis() - lastSendTime >= SEND_INTERVAL) {
        sendSensorData();
        lastSendTime = millis();
    }
    
    delay(100);
}

// ========== –§–£–ù–ö–¶–Ü–á ==========

void detectSensors() {
    Serial.println("–í–∏—è–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –¥–∞—Ç—á–∏–∫—ñ–≤...\n");
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ BME280 (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–æ–ª–æ–≥—ñ—Å—Ç—å, —Ç–∏—Å–∫)
    if (bme.begin(0x76) || bme.begin(0x77)) {
        bme280_available = true;
        Serial.println("‚úì BME280 –∑–Ω–∞–π–¥–µ–Ω–æ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–æ–ª–æ–≥—ñ—Å—Ç—å, —Ç–∏—Å–∫)");
    } else {
        Serial.println("‚úó BME280 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ BH1750 (–æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è)
    if (lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE)) {
        bh1750_available = true;
        Serial.println("‚úì BH1750 –∑–Ω–∞–π–¥–µ–Ω–æ (–æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è)");
    } else {
        Serial.println("‚úó BH1750 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DHT22 (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–æ–ª–æ–≥—ñ—Å—Ç—å)
    dht.begin();
    delay(2000); // DHT –ø–æ—Ç—Ä–µ–±—É—î —á–∞—Å—É –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    float testTemp = dht.readTemperature();
    if (!isnan(testTemp)) {
        dht22_available = true;
        Serial.println("‚úì DHT22 –∑–Ω–∞–π–¥–µ–Ω–æ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–æ–ª–æ–≥—ñ—Å—Ç—å)");
    } else {
        Serial.println("‚úó DHT22 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
    }
    
    Serial.println();
    
    if (!bme280_available && !bh1750_available && !dht22_available) {
        Serial.println("‚ö† –£–í–ê–ì–ê: –ñ–æ–¥–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        Serial.println("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–∞—Ç—á–∏–∫—ñ–≤ —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å ESP32.");
    }
}

void connectWiFi() {
    Serial.print("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WiFi: ");
    Serial.println(WIFI_SSID);
    
    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    
    int attempts = 0;
    while (WiFi.status() != WL_CONNECTED && attempts < 30) {
        delay(500);
        Serial.print(".");
        attempts++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n‚úì WiFi –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!");
        Serial.print("IP –∞–¥—Ä–µ—Å–∞: ");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("\n‚úó –ù–µ –≤–¥–∞–ª–æ—Å—å –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ WiFi!");
        Serial.println("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...");
        delay(10000);
        ESP.restart();
    }
}

void sendSensorData() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–∏—Ö.");
        return;
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JSON –¥–æ–∫—É–º–µ–Ω—Ç—É
    StaticJsonDocument<1024> doc;
    doc["ip_address"] = WiFi.localIP().toString();
    
    JsonObject sensors = doc.createNestedObject("sensors");
    
    // –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ BME280
    if (bme280_available) {
        float temp = bme.readTemperature();
        float humidity = bme.readHumidity();
        float pressure = bme.readPressure() / 100.0F; // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ hPa
        
        if (!isnan(temp)) {
            sensors["temperature"] = round(temp * 10) / 10.0;
            Serial.printf("BME280 –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n", temp);
        }
        if (!isnan(humidity)) {
            sensors["humidity"] = round(humidity * 10) / 10.0;
            Serial.printf("BME280 –í–æ–ª–æ–≥—ñ—Å—Ç—å: %.1f%%\n", humidity);
        }
        if (!isnan(pressure)) {
            sensors["pressure"] = round(pressure * 10) / 10.0;
            Serial.printf("BME280 –¢–∏—Å–∫: %.1f hPa\n", pressure);
        }
    }
    
    // –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ DHT22 (—è–∫—â–æ BME280 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π)
    if (dht22_available && !bme280_available) {
        float temp = dht.readTemperature();
        float humidity = dht.readHumidity();
        
        if (!isnan(temp)) {
            sensors["temperature"] = round(temp * 10) / 10.0;
            Serial.printf("DHT22 –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C\n", temp);
        }
        if (!isnan(humidity)) {
            sensors["humidity"] = round(humidity * 10) / 10.0;
            Serial.printf("DHT22 –í–æ–ª–æ–≥—ñ—Å—Ç—å: %.1f%%\n", humidity);
        }
    }
    
    // –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ BH1750
    if (bh1750_available) {
        float lux = lightMeter.readLightLevel();
        if (lux >= 0) {
            sensors["light"] = round(lux * 10) / 10.0;
            Serial.printf("BH1750 –û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è: %.1f lx\n", lux);
        }
    }
    
    // –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è JSON
    String jsonString;
    serializeJson(doc, jsonString);
    
    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ HTTP POST –∑–∞–ø–∏—Ç—É
    HTTPClient http;
    String url = "http://" + String(SERVER_IP) + ":" + String(SERVER_PORT) + "/api/esp/data";
    
    http.begin(url);
    http.addHeader("Content-Type", "application/json");
    
    Serial.println("\n–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...");
    Serial.println("URL: " + url);
    Serial.println("–î–∞–Ω—ñ: " + jsonString);
    
    int httpResponseCode = http.POST(jsonString);
    
    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.printf("‚úì –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: %d\n", httpResponseCode);
        Serial.println("–í—ñ–¥–ø–æ–≤—ñ–¥—å: " + response);
    } else {
        Serial.printf("‚úó –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: %s\n", http.errorToString(httpResponseCode).c_str());
    }
    
    http.end();
    Serial.println("----------------------------------------\n");
}

// ========== –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –ù–ê –°–ï–†–í–ï–†–Ü ==========
// –í–∏–∫–ª–∏–∫–∞–π—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
// –∞–±–æ –∫–æ–ª–∏ —Ö–æ—á–µ—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥–∞—Ç—á–∏–∫—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ

void registerOnServer(String moduleName, String location) {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å.");
        return;
    }
    
    StaticJsonDocument<2048> doc;
    doc["name"] = moduleName;
    doc["location"] = location;
    doc["ip_address"] = WiFi.localIP().toString();
    
    JsonArray sensorsArray = doc.createNestedArray("sensors");
    
    // –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∞—Ç—á–∏–∫–∏
    if (bme280_available || dht22_available) {
        JsonObject tempSensor = sensorsArray.createNestedObject();
        tempSensor["name"] = "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞";
        tempSensor["type"] = "temperature";
        tempSensor["unit"] = "¬∞C";
        tempSensor["icon"] = "üå°Ô∏è";
        
        JsonObject humSensor = sensorsArray.createNestedObject();
        humSensor["name"] = "–í–æ–ª–æ–≥—ñ—Å—Ç—å";
        humSensor["type"] = "humidity";
        humSensor["unit"] = "%";
        humSensor["icon"] = "üíß";
    }
    
    if (bme280_available) {
        JsonObject pressSensor = sensorsArray.createNestedObject();
        pressSensor["name"] = "–¢–∏—Å–∫";
        pressSensor["type"] = "pressure";
        pressSensor["unit"] = "hPa";
        pressSensor["icon"] = "üìä";
    }
    
    if (bh1750_available) {
        JsonObject lightSensor = sensorsArray.createNestedObject();
        lightSensor["name"] = "–û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è";
        lightSensor["type"] = "light";
        lightSensor["unit"] = "lx";
        lightSensor["icon"] = "üí°";
    }
    
    String jsonString;
    serializeJson(doc, jsonString);
    
    HTTPClient http;
    String url = "http://" + String(SERVER_IP) + ":" + String(SERVER_PORT) + "/api/esp/register";
    
    http.begin(url);
    http.addHeader("Content-Type", "application/json");
    
    Serial.println("\n========================================");
    Serial.println("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –º–æ–¥—É–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ...");
    Serial.println("========================================");
    Serial.println("URL: " + url);
    Serial.println("–î–∞–Ω—ñ: " + jsonString);
    
    int httpResponseCode = http.POST(jsonString);
    
    if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.printf("‚úì –ú–æ–¥—É–ª—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ! –ö–æ–¥: %d\n", httpResponseCode);
        Serial.println("–í—ñ–¥–ø–æ–≤—ñ–¥—å: " + response);
    } else {
        Serial.printf("‚úó –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: %s\n", http.errorToString(httpResponseCode).c_str());
    }
    
    http.end();
    Serial.println("========================================\n");
}